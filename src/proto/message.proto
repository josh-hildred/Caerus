// Author: Kun Ren <renkun.nwpu@gmail.com>
//
// Protocol buffer used for all network messages in the system.
syntax = "proto2";
message MessageProto {
  // Node to which this message should be sent.
  required uint64 destination_node = 1;

  // Channel to which this message shall be delivered when it arrives at node
  // 'destination_node'.
  required string destination_channel = 2;

  // Node from which the message originated.
  optional uint64 source_node = 3;

  // Channel from which the message originated.
  optional int32 source_channel = 4;

  // Every type of network message should get an entry here.
  enum MessageType {
    EMPTY = 0;
    TXN_PROTO = 1;
    TXN_BATCH = 2;
    READ_RESULT = 3;
    LINK_CHANNEL = 4;    // [Connection implementation specific.]
    UNLINK_CHANNEL = 5;  // [Connection implementation specific.]
    TXN_PTR = 6;
    MESSAGE_PTR = 7;
    TXN_SUBBATCH = 8;
    PAXOS_BATCH_ORDER = 9;
    PAXOS_COMMIT = 10;
    PAXOS_DATA = 11;
    PAXOS_DATA_ACK = 12;
    BATCH_VOTE = 13;
    TXN_FORWORD = 14;
    BATCH_SUBMIT = 15;
    MR_TXNS_BATCH = 16;
    NEW_SEQUENCE = 17;
    NEW_SEQUENCE_ACK = 18;
    MASTER_LOOKUP = 19;
    MASTER_LOOKUP_RESULT = 20;
    SYNCHRONIZE = 21;
    SYNCHRONIZE_ACK = 22;
    DONE = 23;
  };
  required MessageType type = 9;

  // Actual data for the message being carried, to be deserialized into a
  // protocol message object of type depending on 'type'. In TXN_PROTO and
  // TXN_BATCH messages, 'data' contains are one and any number of TxnProtos,
  // respectively.
  repeated bytes data = 11;

  // Pointer to actual data for message being carried. Can only be used for
  // messages between threads.
  repeated int64 data_ptr = 12;

  // For TXN_BATCH messages, 'batch_number' identifies the epoch of the txn
  // batch being sent.
  optional uint64 batch_number = 21;

  // For READ_RESULT messages, 'keys(i)' and 'values(i)' store the key and
  // result of a read, respectively.
  repeated bytes keys = 31;
  repeated bytes values = 32;

  // Stick miscellaneous stuff in here if you really want to.
  repeated bool   misc_bool   = 41;
  repeated uint64 misc_int    = 42;
  repeated string misc_string = 43;
  repeated double misc_double = 44;

  // For (UN)LINK_CHANNEL messages, specifies the main channel of the requesting
  // Connection object.
  optional string main_channel = 1001;

  // For (UN)LINK_CHANNEL messages, specifies the channel to be (un)linked
  // to the requesting Connection object.
  optional string channel_request = 1002;
}

